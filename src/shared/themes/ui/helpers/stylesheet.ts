// Generated by ts-to-zod
import { z } from 'zod';

const flexAlignTypeSchema = z.union([
  z.literal('flex-start'),
  z.literal('flex-end'),
  z.literal('center'),
  z.literal('stretch'),
  z.literal('baseline'),
]);

export const dimensionValueSchema = z
  .union([z.number(), z.literal('auto'), z.any(), z.any()])
  .nullable();

const animatableNumericValueSchema = z.union([z.number(), z.any()]);

const animatableStringValueSchema = z.union([z.string(), z.any()]);

export const flexStyleSchema = z.object({
  alignContent: z
    .union([
      z.literal('flex-start'),
      z.literal('flex-end'),
      z.literal('center'),
      z.literal('stretch'),
      z.literal('space-between'),
      z.literal('space-around'),
      z.undefined(),
    ])
    .optional(),
  alignItems: z.union([flexAlignTypeSchema, z.undefined()]).optional(),
  alignSelf: z
    .union([z.literal('auto'), flexAlignTypeSchema, z.undefined()])
    .optional(),
  aspectRatio: z.union([z.number(), z.string(), z.undefined()]).optional(),
  borderBottomWidth: z.union([z.number(), z.undefined()]).optional(),
  borderEndWidth: z.union([z.number(), z.undefined()]).optional(),
  borderLeftWidth: z.union([z.number(), z.undefined()]).optional(),
  borderRightWidth: z.union([z.number(), z.undefined()]).optional(),
  borderStartWidth: z.union([z.number(), z.undefined()]).optional(),
  borderTopWidth: z.union([z.number(), z.undefined()]).optional(),
  borderWidth: z.union([z.number(), z.undefined()]).optional(),
  bottom: z.union([dimensionValueSchema, z.undefined()]).optional(),
  display: z
    .union([z.literal('none'), z.literal('flex'), z.undefined()])
    .optional(),
  end: z.union([dimensionValueSchema, z.undefined()]).optional(),
  flex: z.union([z.number(), z.undefined()]).optional(),
  flexBasis: z.union([dimensionValueSchema, z.undefined()]).optional(),
  flexDirection: z
    .union([
      z.literal('row'),
      z.literal('column'),
      z.literal('row-reverse'),
      z.literal('column-reverse'),
      z.undefined(),
    ])
    .optional(),
  rowGap: z.union([z.number(), z.undefined()]).optional(),
  gap: z.union([z.number(), z.undefined()]).optional(),
  columnGap: z.union([z.number(), z.undefined()]).optional(),
  flexGrow: z.union([z.number(), z.undefined()]).optional(),
  flexShrink: z.union([z.number(), z.undefined()]).optional(),
  flexWrap: z
    .union([
      z.literal('wrap'),
      z.literal('nowrap'),
      z.literal('wrap-reverse'),
      z.undefined(),
    ])
    .optional(),
  height: z.union([dimensionValueSchema, z.undefined()]).optional(),
  justifyContent: z
    .union([
      z.literal('flex-start'),
      z.literal('flex-end'),
      z.literal('center'),
      z.literal('space-between'),
      z.literal('space-around'),
      z.literal('space-evenly'),
      z.undefined(),
    ])
    .optional(),
  left: z.union([dimensionValueSchema, z.undefined()]).optional(),
  margin: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginBottom: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginEnd: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginHorizontal: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginLeft: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginRight: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginStart: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginTop: z.union([dimensionValueSchema, z.undefined()]).optional(),
  marginVertical: z.union([dimensionValueSchema, z.undefined()]).optional(),
  maxHeight: z.union([dimensionValueSchema, z.undefined()]).optional(),
  maxWidth: z.union([dimensionValueSchema, z.undefined()]).optional(),
  minHeight: z.union([dimensionValueSchema, z.undefined()]).optional(),
  minWidth: z.union([dimensionValueSchema, z.undefined()]).optional(),
  overflow: z
    .union([
      z.literal('visible'),
      z.literal('hidden'),
      z.literal('scroll'),
      z.undefined(),
    ])
    .optional(),
  padding: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingBottom: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingEnd: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingHorizontal: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingLeft: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingRight: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingStart: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingTop: z.union([dimensionValueSchema, z.undefined()]).optional(),
  paddingVertical: z.union([dimensionValueSchema, z.undefined()]).optional(),
  position: z
    .union([z.literal('absolute'), z.literal('relative'), z.undefined()])
    .optional(),
  right: z.union([dimensionValueSchema, z.undefined()]).optional(),
  start: z.union([dimensionValueSchema, z.undefined()]).optional(),
  top: z.union([dimensionValueSchema, z.undefined()]).optional(),
  width: z.union([dimensionValueSchema, z.undefined()]).optional(),
  zIndex: z.union([z.number(), z.undefined()]).optional(),
  direction: z
    .union([
      z.literal('inherit'),
      z.literal('ltr'),
      z.literal('rtl'),
      z.undefined(),
    ])
    .optional(),
});

const perpectiveTransformSchema = z.object({
  perspective: animatableNumericValueSchema,
});

const rotateTransformSchema = z.object({
  rotate: animatableStringValueSchema,
});

const rotateXTransformSchema = z.object({
  rotateX: animatableStringValueSchema,
});

const rotateYTransformSchema = z.object({
  rotateY: animatableStringValueSchema,
});

const rotateZTransformSchema = z.object({
  rotateZ: animatableStringValueSchema,
});

const scaleTransformSchema = z.object({
  scale: animatableNumericValueSchema,
});

const scaleXTransformSchema = z.object({
  scaleX: animatableNumericValueSchema,
});

const scaleYTransformSchema = z.object({
  scaleY: animatableNumericValueSchema,
});

const translateXTransformSchema = z.object({
  translateX: animatableNumericValueSchema,
});

const translateYTransformSchema = z.object({
  translateY: animatableNumericValueSchema,
});

const skewXTransformSchema = z.object({
  skewX: animatableStringValueSchema,
});

const skewYTransformSchema = z.object({
  skewY: animatableStringValueSchema,
});

const matrixTransformSchema = z.object({
  matrix: z.array(animatableNumericValueSchema),
});

export const transformsStyleSchema = z.object({
  transform: z
    .union([
      z.array(
        z.union([
          perpectiveTransformSchema,
          rotateTransformSchema,
          rotateXTransformSchema,
          rotateYTransformSchema,
          rotateZTransformSchema,
          scaleTransformSchema,
          scaleXTransformSchema,
          scaleYTransformSchema,
          translateXTransformSchema,
          translateYTransformSchema,
          skewXTransformSchema,
          skewYTransformSchema,
          matrixTransformSchema,
        ]),
      ),
      z.string(),
      z.undefined(),
    ])
    .optional(),
  transformMatrix: z.union([z.array(z.number()), z.undefined()]).optional(),
  rotation: z.union([animatableNumericValueSchema, z.undefined()]).optional(),
  scaleX: z.union([animatableNumericValueSchema, z.undefined()]).optional(),
  scaleY: z.union([animatableNumericValueSchema, z.undefined()]).optional(),
  translateX: z.union([animatableNumericValueSchema, z.undefined()]).optional(),
  translateY: z.union([animatableNumericValueSchema, z.undefined()]).optional(),
});

export const fontVariantSchema = z.union([
  z.literal('small-caps'),
  z.literal('oldstyle-nums'),
  z.literal('lining-nums'),
  z.literal('tabular-nums'),
  z.literal('proportional-nums'),
]);

const colorValueSchema = z.any();

const imageResizeModeSchema = z.any();

export const shadowStyleIOSSchema = z.object({
  shadowColor: z.union([colorValueSchema, z.undefined()]).optional(),
  shadowOffset: z
    .union([
      z.object({
        width: z.number(),
        height: z.number(),
      }),
      z.undefined(),
    ])
    .optional(),
  shadowOpacity: z
    .union([animatableNumericValueSchema, z.undefined()])
    .optional(),
  shadowRadius: z.union([z.number(), z.undefined()]).optional(),
});

export const viewStyleSchema = flexStyleSchema
  .extend(shadowStyleIOSSchema.shape)
  .extend(transformsStyleSchema.shape)
  .extend({
    backfaceVisibility: z
      .union([z.literal('visible'), z.literal('hidden'), z.undefined()])
      .optional(),
    backgroundColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderBlockColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderBlockEndColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderBlockStartColor: z
      .union([colorValueSchema, z.undefined()])
      .optional(),
    borderBottomColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderBottomEndRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderBottomLeftRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderBottomRightRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderBottomStartRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderCurve: z
      .union([z.literal('circular'), z.literal('continuous'), z.undefined()])
      .optional(),
    borderEndColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderEndEndRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderEndStartRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderLeftColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderRightColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderStartColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderStartEndRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderStartStartRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderStyle: z
      .union([
        z.literal('solid'),
        z.literal('dotted'),
        z.literal('dashed'),
        z.undefined(),
      ])
      .optional(),
    borderTopColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderTopEndRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderTopLeftRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderTopRightRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderTopStartRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    opacity: z.union([animatableNumericValueSchema, z.undefined()]).optional(),
    elevation: z.union([z.number(), z.undefined()]).optional(),
    pointerEvents: z
      .union([
        z.literal('box-none'),
        z.literal('none'),
        z.literal('box-only'),
        z.literal('auto'),
        z.undefined(),
      ])
      .optional(),
  });

export const textStyleIOSSchema = viewStyleSchema.extend({
  fontVariant: z.union([z.array(fontVariantSchema), z.undefined()]).optional(),
  textDecorationColor: z.union([colorValueSchema, z.undefined()]).optional(),
  textDecorationStyle: z
    .union([
      z.literal('solid'),
      z.literal('double'),
      z.literal('dotted'),
      z.literal('dashed'),
      z.undefined(),
    ])
    .optional(),
  writingDirection: z
    .union([
      z.literal('auto'),
      z.literal('ltr'),
      z.literal('rtl'),
      z.undefined(),
    ])
    .optional(),
});

export const textStyleAndroidSchema = viewStyleSchema.extend({
  textAlignVertical: z
    .union([
      z.literal('auto'),
      z.literal('top'),
      z.literal('bottom'),
      z.literal('center'),
      z.undefined(),
    ])
    .optional(),
  verticalAlign: z
    .union([
      z.literal('auto'),
      z.literal('top'),
      z.literal('bottom'),
      z.literal('middle'),
      z.undefined(),
    ])
    .optional(),
  includeFontPadding: z.union([z.boolean(), z.undefined()]).optional(),
});

export const textStyleSchema = textStyleIOSSchema
  .extend(textStyleAndroidSchema.shape)
  .extend(viewStyleSchema.shape)
  .extend({
    color: z.union([colorValueSchema, z.undefined()]).optional(),
    fontFamily: z.union([z.string(), z.undefined()]).optional(),
    fontSize: z.union([z.number(), z.undefined()]).optional(),
    fontStyle: z
      .union([z.literal('normal'), z.literal('italic'), z.undefined()])
      .optional(),
    fontWeight: z
      .union([
        z.literal('normal'),
        z.literal('bold'),
        z.literal('100'),
        z.literal('200'),
        z.literal('300'),
        z.literal('400'),
        z.literal('500'),
        z.literal('600'),
        z.literal('700'),
        z.literal('800'),
        z.literal('900'),
        z.undefined(),
      ])
      .optional(),
    letterSpacing: z.union([z.number(), z.undefined()]).optional(),
    lineHeight: z.union([z.number(), z.undefined()]).optional(),
    textAlign: z
      .union([
        z.literal('auto'),
        z.literal('left'),
        z.literal('right'),
        z.literal('center'),
        z.literal('justify'),
        z.undefined(),
      ])
      .optional(),
    textDecorationLine: z
      .union([
        z.literal('none'),
        z.literal('underline'),
        z.literal('line-through'),
        z.literal('underline line-through'),
        z.undefined(),
      ])
      .optional(),
    textDecorationStyle: z
      .union([
        z.literal('solid'),
        z.literal('double'),
        z.literal('dotted'),
        z.literal('dashed'),
        z.undefined(),
      ])
      .optional(),
    textDecorationColor: z.union([colorValueSchema, z.undefined()]).optional(),
    textShadowColor: z.union([colorValueSchema, z.undefined()]).optional(),
    textShadowOffset: z
      .union([
        z.object({
          width: z.number(),
          height: z.number(),
        }),
        z.undefined(),
      ])
      .optional(),
    textShadowRadius: z.union([z.number(), z.undefined()]).optional(),
    textTransform: z
      .union([
        z.literal('none'),
        z.literal('capitalize'),
        z.literal('uppercase'),
        z.literal('lowercase'),
        z.undefined(),
      ])
      .optional(),
    testID: z.union([z.string(), z.undefined()]).optional(),
  });

export const imageStyleSchema = flexStyleSchema
  .extend(shadowStyleIOSSchema.shape)
  .extend(transformsStyleSchema.shape)
  .extend({
    resizeMode: z.union([imageResizeModeSchema, z.undefined()]).optional(),
    backfaceVisibility: z
      .union([z.literal('visible'), z.literal('hidden'), z.undefined()])
      .optional(),
    borderBottomLeftRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderBottomRightRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    backgroundColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderColor: z.union([colorValueSchema, z.undefined()]).optional(),
    borderRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderTopLeftRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    borderTopRightRadius: z
      .union([animatableNumericValueSchema, z.undefined()])
      .optional(),
    overflow: z
      .union([z.literal('visible'), z.literal('hidden'), z.undefined()])
      .optional(),
    overlayColor: z.union([colorValueSchema, z.undefined()]).optional(),
    tintColor: z.union([colorValueSchema, z.undefined()]).optional(),
    opacity: z.union([animatableNumericValueSchema, z.undefined()]).optional(),
    objectFit: z
      .union([
        z.literal('cover'),
        z.literal('contain'),
        z.literal('fill'),
        z.literal('scale-down'),
        z.undefined(),
      ])
      .optional(),
  });
